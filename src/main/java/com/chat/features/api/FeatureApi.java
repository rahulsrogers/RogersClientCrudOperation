/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.0.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.chat.features.api;

import com.chat.features.model.FeatureDetails;
import com.chat.features.model.FeatureRequest;
import com.chat.features.model.ResponseStatus;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-02-16T06:31:35.058456400-05:00[America/Toronto]")
@Validated
@Api(value = "feature", description = "the feature API")
public interface FeatureApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /feature : Adds new feature details.
     *
     * @param featureRequest  (required)
     * @return Successfully added the feature details. (status code 201)
     *         or Bad request. (status code 400)
     *         or Unknown server error. (status code 500)
     */
    @ApiOperation(value = "Adds new feature details.", nickname = "addFeature", notes = "", response = ResponseStatus.class, authorizations = {
        
        @Authorization(value = "BearerAuth")
         }, tags={ "Features api", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Successfully added the feature details.", response = ResponseStatus.class),
        @ApiResponse(code = 400, message = "Bad request.", response = ResponseStatus.class),
        @ApiResponse(code = 500, message = "Unknown server error.", response = ResponseStatus.class) })
    @PostMapping(
        value = "/feature",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ResponseStatus> _addFeature(@ApiParam(value = "" ,required=true )  @Valid @RequestBody FeatureRequest featureRequest) {
        return addFeature(featureRequest);
    }

    // Override this method
    default  ResponseEntity<ResponseStatus> addFeature(FeatureRequest featureRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"2xx\", \"codeName\" : \"success\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /feature/{id} : Deletes an existing feature.
     *
     * @param id Feature Id (required)
     * @return Successfully deleted the feature details. (status code 200)
     *         or Bad request. (status code 400)
     *         or Unknown server error. (status code 500)
     */
    @ApiOperation(value = "Deletes an existing feature.", nickname = "deleteFeature", notes = "", response = ResponseStatus.class, authorizations = {
        
        @Authorization(value = "BearerAuth")
         }, tags={ "Features api", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully deleted the feature details.", response = ResponseStatus.class),
        @ApiResponse(code = 400, message = "Bad request.", response = ResponseStatus.class),
        @ApiResponse(code = 500, message = "Unknown server error.", response = ResponseStatus.class) })
    @DeleteMapping(
        value = "/feature/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<ResponseStatus> _deleteFeature(@ApiParam(value = "Feature Id",required=true) @PathVariable("id") String id) {
        return deleteFeature(id);
    }

    // Override this method
    default  ResponseEntity<ResponseStatus> deleteFeature(String id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"2xx\", \"codeName\" : \"success\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /feature/{id} : Gets feature details based on Id.
     *
     * @param id Feature Id (required)
     * @return Successfully fetched the feature details. (status code 200)
     *         or Bad request. (status code 400)
     *         or Unknown server error. (status code 500)
     */
    @ApiOperation(value = "Gets feature details based on Id.", nickname = "getFeature", notes = "", response = FeatureDetails.class, authorizations = {
        
        @Authorization(value = "BearerAuth")
         }, tags={ "Features api", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully fetched the feature details.", response = FeatureDetails.class),
        @ApiResponse(code = 400, message = "Bad request.", response = ResponseStatus.class),
        @ApiResponse(code = 500, message = "Unknown server error.", response = ResponseStatus.class) })
    @GetMapping(
        value = "/feature/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<FeatureDetails> _getFeature(@ApiParam(value = "Feature Id",required=true) @PathVariable("id") String id) {
        return getFeature(id);
    }

    // Override this method
    default  ResponseEntity<FeatureDetails> getFeature(String id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"launchQuarter\" : \"Q1\", \"expectedRoi\" : \"expectedRoi\", \"launchYear\" : 2021, \"businessValue\" : \"businessValue\", \"description\" : \"description\", \"id\" : \"id\", \"launchDate\" : \"2021-08-29T09:12:33.001Z\", \"title\" : \"title\", \"productOwner\" : \"productOwner\", \"brand\" : \"Rogers\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /feature : Gets the list of all the added features.
     *
     * @return Successfully fetched the feature details. (status code 200)
     *         or Bad request. (status code 400)
     *         or Unknown server error. (status code 500)
     */
    @ApiOperation(value = "Gets the list of all the added features.", nickname = "getFeatures", notes = "", response = FeatureDetails.class, responseContainer = "List", authorizations = {
        
        @Authorization(value = "BearerAuth")
         }, tags={ "Features api", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully fetched the feature details.", response = FeatureDetails.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad request.", response = ResponseStatus.class),
        @ApiResponse(code = 500, message = "Unknown server error.", response = ResponseStatus.class) })
    @GetMapping(
        value = "/feature",
        produces = { "application/json" }
    )
    default ResponseEntity<List<FeatureDetails>> _getFeatures() {
        return getFeatures();
    }

    // Override this method
    default  ResponseEntity<List<FeatureDetails>> getFeatures() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"launchQuarter\" : \"Q1\", \"expectedRoi\" : \"expectedRoi\", \"launchYear\" : 2021, \"businessValue\" : \"businessValue\", \"description\" : \"description\", \"id\" : \"id\", \"launchDate\" : \"2021-08-29T09:12:33.001Z\", \"title\" : \"title\", \"productOwner\" : \"productOwner\", \"brand\" : \"Rogers\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /feature/{id} : Updates existing feature details.
     *
     * @param id Feature Id (required)
     * @param featureRequest  (required)
     * @return Successfully updated the feature details. (status code 200)
     *         or Bad request. (status code 400)
     *         or Unknown server error. (status code 500)
     */
    @ApiOperation(value = "Updates existing feature details.", nickname = "updateFeature", notes = "", response = ResponseStatus.class, authorizations = {
        
        @Authorization(value = "BearerAuth")
         }, tags={ "Features api", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully updated the feature details.", response = ResponseStatus.class),
        @ApiResponse(code = 400, message = "Bad request.", response = ResponseStatus.class),
        @ApiResponse(code = 500, message = "Unknown server error.", response = ResponseStatus.class) })
    @PutMapping(
        value = "/feature/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ResponseStatus> _updateFeature(@ApiParam(value = "Feature Id",required=true) @PathVariable("id") String id,@ApiParam(value = "" ,required=true )  @Valid @RequestBody FeatureRequest featureRequest) {
        return updateFeature(id, featureRequest);
    }

    // Override this method
    default  ResponseEntity<ResponseStatus> updateFeature(String id, FeatureRequest featureRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"2xx\", \"codeName\" : \"success\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
